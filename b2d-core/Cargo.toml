[package]
name = "b2d-core"
version = "0.1.0"
authors = ["Remi van der Laan <rrm-remi@hotmail.com>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook"]


[dependencies]

js-sys = "0.3.50"
wasm-bindgen = "0.2.73"
base64 = "0.13.0"
serde = { version = "1.0.125", features = ["derive"] }
serde_json = "1.0.64"

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.5", optional = true }

wasm-bindgen-futures = "0.4.21"

[dev-dependencies]
wasm-bindgen-test = "0.3.13"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"

# All dependencies compile in release even in debug mode
[profile.dev.package.'*']
opt-level = 3

# For accessing canvas from Rust
[dependencies.web-sys]
version = "0.3.50"
features = [
  # WebGL
  'Document',
  'Element',
  'HtmlCanvasElement',
  'Node',
  'HtmlDocument',
  'WebGlBuffer',
  'WebGlRenderingContext',
  'WebGlProgram',
  'WebGlShader',
  'Window',
  'console',

  # WebRTC
  #"MessageEvent",
  #"RtcPeerConnection",
  #"RtcSignalingState",
  #"RtcSdpType",
  #"RtcSessionDescriptionInit",
  #"RtcPeerConnectionIceEvent",
  #"RtcIceCandidate",
  #"RtcDataChannel",
  #"RtcDataChannelEvent",
  # Grabbed from https://github.com/codec-abc/Yew-WebRTC-Chat/blob/master/Cargo.toml
  'RtcAnswerOptions',
  'RtcCertificate',
  'RtcCertificateExpiration',
  'RtcCodecStats',
  'RtcConfiguration',
  'RtcDataChannel',
  'RtcDataChannelEvent',
  'RtcDataChannelEventInit',
  'RtcDataChannelInit',
  'RtcDataChannelState',
  'RtcFecParameters',
  'RtcIceCandidate',
  'RtcIceCandidateInit',
  'RtcIceCandidatePairStats',
  'RtcIceCandidateStats',
  'RtcIceComponentStats',
  'RtcIceServer',
  'RtcIdentityAssertion',
  'RtcIdentityAssertionResult',
  'RtcIdentityProvider',
  'RtcIdentityProviderDetails',
  'RtcIdentityProviderOptions',
  'RtcIdentityProviderRegistrar',
  'RtcIdentityValidationResult',
  'RtcInboundRtpStreamStats',
  'RtcMediaStreamStats',
  'RtcMediaStreamTrackStats',
  'RtcOfferAnswerOptions',
  'RtcOfferOptions',
  'RtcOutboundRtpStreamStats',
  'RtcPeerConnection',
  'RtcPeerConnectionIceEvent',
  'RtcPeerConnectionIceEventInit',
  'RtcRtcpParameters',
  'RtcRtpCodecParameters',
  'RtcRtpContributingSource',
  'RtcRtpEncodingParameters',
  'RtcRtpHeaderExtensionParameters',
  'RtcRtpParameters',
  'RtcRtpReceiver',
  'RtcRtpSender',
  'RtcRtpSourceEntry',
  'RtcRtpSynchronizationSource',
  'RtcRtpTransceiver',
  'RtcRtpTransceiverInit',
  'RtcRtxParameters',
  'RtcSessionDescription',
  'RtcSessionDescriptionInit',
  'RtcStats',
  'RtcStatsReport',
  'RtcStatsReportInternal',
  'RtcTrackEvent',
  'RtcTrackEventInit',
  'RtcTransportStats',
  'RtcIceConnectionState',
  'RtcIceGatheringState',
  'RtcSdpType',
  'RtcdtmfSender',
  'RtcdtmfToneChangeEvent',
  'RtcdtmfToneChangeEventInit',
  'RtcrtpContributingSourceStats',

]
